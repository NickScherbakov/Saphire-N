1. **Анализ блок-схемы**:
   - Изучите блок-схему (`datagramma.png`) для понимания взаимодействия компонентов системы и последовательности обработки данных.
   - Убедитесь, что каждый компонент реализован в соответствии с архитектурой, представленной на схеме.

2. **Обновление структуры проекта**:
   - Проверьте текущую структуру проекта и при необходимости скорректируйте её. Структура должна отражать взаимодействие компонентов:
     ```
     Saphire-N/
     ├── main.py                # Точка входа в приложение
     ├── openai_assistant.py    # Главный модуль для управления задачами
     ├── agents/                # Папка с реализациями агентов
     │   ├── __init__.py
     │   ├── agent_interface.py # Интерфейс агентов
     │   ├── ollama_agent.py    # Реализация OllamaAgent
     │   └── gigachat_agent.py  # Реализация GigaChatAgent
     ├── database/              # Модуль работы с базой данных
     │   ├── __init__.py
     │   └── database_manager.py
     ├── requirements.txt       # Список зависимостей
     └── README.md              # Документация проекта
     ```

3. **Реализация компонентов**:
   - **Модуль взаимодействия с пользователем (`openai_assistant.py`)**:
     - Реализуйте методы:
       - `initialize()`: Инициализация агентов и базы данных.
       - `query_agents_for_capabilities()`: Запрос способностей агентов.
       - `handle_user_request(request)`: Уточнение и обработка запросов пользователя.
       - `decompose_task(task)`: Разделение сложной задачи на подзадачи.
   - **Агенты (`agents/`)**:
     - Создайте интерфейс `AgentInterface` с методами:
       - `get_capabilities()`: Возвращает список возможностей агента.
       - `perform_task(task, data)`: Выполняет задачу.
     - Реализуйте агентов `OllamaAgent` и `GigaChatAgent`:
       - `OllamaAgent`: Обрабатывает текстовые данные.
       - `GigaChatAgent`: Генерирует визуализации и отчёты.
   - **Хранилище данных (`database/`)**:
     - Настройте базу данных (например, SQLite) с таблицами:
       - `Requests`: Для хранения пользовательских запросов.
       - `Results`: Для хранения результатов выполнения задач.
   - **Интернет и API**:
     - Реализуйте модуль для отправки HTTP-запросов и обработки данных из внешних API.

4. **Интеграция компонентов**:
   - Убедитесь, что модули взаимодействуют друг с другом в соответствии с последовательностью на блок-схеме:
     - Пользователь → OpenAI → Агенты → Хранилище данных → Результат пользователю.

5. **Тестирование системы**:
   - Напишите тесты для проверки:
     - Корректности инициализации системы.
     - Работы агентов и их взаимодействия с `OpenAIAssistant`.
     - Корректности декомпозиции задач и записи данных в базу.

6. **Документирование**:
   - Обновите документацию в `README.md`, чтобы она отражала:
     - Логическую структуру проекта.
     - Реализованные возможности.
     - Примеры использования системы.

7. **Завершение этапа**:
   - Подготовьте отчёт о проделанной работе, включающий:
     - Статус выполненных задач.
     - Описание выявленных проблем или ограничений.
     - Предложения для дальнейших шагов.